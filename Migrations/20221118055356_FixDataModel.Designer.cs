// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskDelegatingApp.Data;

#nullable disable

namespace TaskDelegatingApp.Migrations
{
    [DbContext(typeof(TaskDelegatingAppContext))]
    [Migration("20221118055356_FixDataModel")]
    partial class FixDataModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PersonTaskItem", b =>
                {
                    b.Property<int>("PersonsPersonID")
                        .HasColumnType("int");

                    b.Property<int>("TaskItemsTaskItemID")
                        .HasColumnType("int");

                    b.HasKey("PersonsPersonID", "TaskItemsTaskItemID");

                    b.HasIndex("TaskItemsTaskItemID");

                    b.ToTable("PersonTaskItem");
                });

            modelBuilder.Entity("TaskDelegatingApp.Models.Day", b =>
                {
                    b.Property<int>("DayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DayID"));

                    b.Property<string>("DayDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DayID");

                    b.ToTable("Day");
                });

            modelBuilder.Entity("TaskDelegatingApp.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<int?>("DayID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Friday")
                        .HasColumnType("bit");

                    b.Property<bool>("Monday")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Saturday")
                        .HasColumnType("bit");

                    b.Property<bool>("Sunday")
                        .HasColumnType("bit");

                    b.Property<bool>("Thursday")
                        .HasColumnType("bit");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("bit");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("bit");

                    b.HasKey("PersonID");

                    b.HasIndex("DayID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("TaskDelegatingApp.Models.TaskItem", b =>
                {
                    b.Property<int>("TaskItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskItemID"));

                    b.Property<int>("DayID")
                        .HasColumnType("int");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeOfDay")
                        .HasColumnType("int");

                    b.HasKey("TaskItemID");

                    b.HasIndex("DayID");

                    b.ToTable("TaskItem");
                });

            modelBuilder.Entity("PersonTaskItem", b =>
                {
                    b.HasOne("TaskDelegatingApp.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsPersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskDelegatingApp.Models.TaskItem", null)
                        .WithMany()
                        .HasForeignKey("TaskItemsTaskItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskDelegatingApp.Models.Person", b =>
                {
                    b.HasOne("TaskDelegatingApp.Models.Day", null)
                        .WithMany("Persons")
                        .HasForeignKey("DayID");
                });

            modelBuilder.Entity("TaskDelegatingApp.Models.TaskItem", b =>
                {
                    b.HasOne("TaskDelegatingApp.Models.Day", "Day")
                        .WithMany("TaskItems")
                        .HasForeignKey("DayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");
                });

            modelBuilder.Entity("TaskDelegatingApp.Models.Day", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("TaskItems");
                });
#pragma warning restore 612, 618
        }
    }
}
